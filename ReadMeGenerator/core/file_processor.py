import re
import os
from core.openai_client import OpenAIClient

class FileProcessor:
  """
  Class to process Python files, identify functions and classes without comments,
  and generate comments automatically using the OpenAI API.
  """

  HEADER_EXAMPLE = """
    Path: Proyect/main.py
    Description: This Python script serves as the main entry point for a program that demonstrates 
    the functionality of a custom mathematical library `mate`. It showcases various operations 
    such as addition, subtraction, multiplication, division, power, and square root using the 
    Calculadora class from the `mate` module.
    """
  
  FUNCTION_EXAMPLE = """
    Function: suma(self, a, b)
    Objective: Performs the addition of two numbers.
    Input: 
       a (float): The first number.
       b (float): The second number.
    Output: Returns the sum of the two numbers.
    """
  
  CONDITIONAL_EXAMPLE = """
    def division(self, a, b):
    # Ensures that the divisor is not zero to avoid a division error.
    if b == 0:
    """


  def __init__(self, openai_client: OpenAIClient):
    """
    Initializes the FileProcessor class with an OpenAI client.

    Args:
      openai_client (OpenAIClient): Instance of the OpenAI client to generate comments.
    """
    self.openai_client = openai_client

  def process_file(self, file_path: str):
    """
    Processes a Python file, adds comments to undocumented functions and classes.

    Args:
      file_path (str): Path to the Python file to be processed.
    """
    if not file_path.endswith(".py"):
      raise ValueError(f"{file_path} is not a Python file.")

    with open(file_path, "r", encoding="utf-8") as f:
      lines = f.readlines()

    updated_lines = self._add_comments(lines, file_path)

    with open(file_path, "w", encoding="utf-8") as f:
      f.writelines(updated_lines)

  def _add_comments(self, lines: list[str], file_path: str) -> list[str]:
    """
    Identifies functions and classes without comments and adds one.

    Args:
      lines (list[str]): List of lines from the Python file.
      file_path (str): Path to the file being processed.

    Returns:
      list[str]: Lines of the file with added comments.
    """
    new_lines = self._generate_comment(lines, file_path)
    
    return new_lines[10:-3]

  def _generate_comment(self, list : list, file_path : str) -> str:
    """
    Generates a comment using the OpenAI API.

    Args:
      name (str): Name of the function or class.
      file_path (str): Path to the file where the function or class is located.

    Returns:
      str: Comment generated by the API.
    """
    prompt = (
      f"Give me the code commented for the file in {file_path}, given in the list {list}"
      f"In the header of the file, give the path and a brief description of the file."
      f"Here is an example of header: {self.HEADER_EXAMPLE}"
      f"Do not comment the functions or classes that already have a comment."
      f"Comment only the functions, clases, imports and conditionals like for, while, if."
      f"Do not comment any variable, constant or function call."
      f"The new function and class comments should contain the objective, the input parameters and the output."
      f"Here is an example of function comment: {self.FUNCTION_EXAMPLE}"
      f"The new import comments should contain a very brief description of the module and the functionalities imported."
      f"The new conditional comments should only contain the purpose of the conditional."
      f"Here is an example of conditional comment: {self.CONDITIONAL_EXAMPLE}"
      f"I dont want any other text, just the code."
      f"The indentation should be the same as the original code."

    )
    return self.openai_client.generate_comment(prompt)